# RUN: llc -march=x86-64 -run-pass none -o - %s | FileCheck %s
# REQUIRES: global-isel
# Test that the MIR parser parses types on generic instructions correctly.

--- |
  target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
  %type_alias = type <2 x i32>
  %structure_alias = type { i32, i16 }
  define void @test_vregs() {
    ret void
  }

  define void @test_unsized() {
    ret void
  }

...

---
name:            test_vregs
# CHECK:      registers:
# CHECK-NEXT:   - { id: 0, class: _ }
# CHECK-NEXT:   - { id: 1, class: _ }
# CHECK-NEXT:   - { id: 2, class: _ }
# CHECK-NEXT:   - { id: 3, class: _ }
# CHECK-NEXT:   - { id: 4, class: _ }
registers:
  - { id: 0, class: _ }
  - { id: 1, class: _ }
  - { id: 2, class: _ }
  - { id: 3, class: _ }
  - { id: 4, class: _ }
  - { id: 5, class: _ }
body: |
  bb.0:
    liveins: %edi
    ; CHECK:      %1(32) = G_ADD s32 %0
    %0(32) = COPY %edi
    %1(32) = G_ADD s32 %0, %0
    ; CHECK:      %2(64) = G_ADD <2 x s32> %0
    %2(64) = G_ADD <2 x s32> %0, %0
    ; CHECK:      %3(64) = G_ADD s64 %0
    %3(64) = G_ADD s64 %0, %0
    ; G_ADD is actually not a valid operand for structure type,
    ; but that is the only one we have for now for testing.
    ; CHECK:      %4(64) = G_ADD s64 %0
    %4(64) = G_ADD s64 %0, %0
    ; CHECK:      %5(48) = G_ADD s48 %0
    %5(48) = G_ADD s48 %0, %0
...

---
name:            test_unsized
body: |
  bb.0:
    successors: %bb.0

    ; CHECK:      G_BR unsized %bb.0
    G_BR unsized %bb.0
...
